{"version":3,"file":"static/js/125.e44f1b72.chunk.js","mappings":"kPAgGA,EAtFe,WAEX,IAAAA,GAA6CC,EAAAA,EAAAA,YAAWC,EAAAA,GAAhDC,EAAWH,EAAXG,YAAaC,EAAWJ,EAAXI,YAAaC,EAAML,EAANK,OAClCC,GAAmCL,EAAAA,EAAAA,YAAWM,EAAAA,GAAtCC,EAAWF,EAAXE,YAAaC,EAASH,EAATG,UACrBC,GAAkCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GACxBI,GAAWC,EAAAA,EAAAA,QAAO,MAc1B,OALMC,EAAAA,EAAAA,YAAU,WACPF,EAASG,QAAQC,OACpB,GAAG,KAIPC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAC9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAWb,EAAY,mBAAqB,qBAAqBc,SAAA,EACnEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yBAAwBC,SAAA,EACtCF,EAAAA,EAAAA,KAAA,SAAOI,KAAK,SACZC,IAAKV,EACLW,YAAY,iCACZC,SAAU,SAACC,GAAC,OAAGd,EAAac,EAAEC,OAAOC,MAAM,EAC3CA,MAAOjB,EACPkB,UApBc,SAACH,GACN,UAAVA,EAAEI,KACD9B,EAAYW,EACf,KAkBGO,EAAAA,EAAAA,KAAA,UAAQa,QAAS,kBAAI/B,EAAYW,EAAU,EAACS,UAACF,EAAAA,EAAAA,KAACc,EAAAA,IAAQ,UAGtDd,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SAC9BnB,EACEA,EAAYgC,OAAOC,MAAMC,KAAI,SAACC,GAE9B,OACClB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBC,UACpCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0BAAyBC,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAACmB,EAAAA,cAAa,CACdC,IAAKF,EAAKG,MAAMC,OAAO,GAAGC,IAC1BC,eAAgBC,EAChBC,OAAO,OACPC,IAAI,QACJd,QAAS,kBAAI1B,EAAY+B,EAAKU,IAAI,OAGpC5B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC5BF,EAAAA,EAAAA,KAAA,MAAAE,SAAmBgB,EAAKW,MAAfX,EAAKY,UAZyBZ,EAAKY,GAkBvD,IACI9C,GAAUA,EAAO+B,QAAU/B,EAAO+B,OAAOC,MAC1ChC,EAAO+B,OAAOC,MAAMC,KAAI,SAACC,GACxB,OAAQlB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBC,UAChDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0BAAyBC,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAACmB,EAAAA,cAAa,CACdC,IAAKF,EAAKa,MAAMV,MAAMC,OAAO,GAAGC,IAChCC,eAAgBC,EAChBC,OAAO,OACPC,IAAI,QACJd,QAAS,kBAAI1B,EAAY+B,EAAKa,MAAMH,IAAI,OAG1C5B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC5BF,EAAAA,EAAAA,KAAA,MAAAE,SAAmBgB,EAAKa,MAAMF,MAArBX,EAAKY,UAZqCZ,EAAKY,GAiB5D,IACG,WAQlB,C","sources":["Components/Search/Search.jsx"],"sourcesContent":["import \"./Search.css\"\r\nimport { useContext, useEffect, useRef, useState } from \"react\"\r\nimport { BsSearch } from \"react-icons/bs\"\r\nimport { ApiContext } from \"../../Contexts/ApiReq\"\r\n\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\"\r\nimport \"react-lazy-load-image-component/src/effects/blur.css\"\r\nimport spotyTiny from \"../../assets/spoty_tiny.jpg\"\r\nimport { SomeContexts } from \"../../Contexts/Context\"\r\n\r\nconst Search = () => {\r\n\r\n    const { songRequest, storeSearch, album1 } = useContext(ApiContext)\r\n    const { setTrackURI, arrowIcon } = useContext(SomeContexts)\r\n    const [inputText, setInputText] = useState(\"\")\r\n    const inputRef = useRef(null)\r\n   \r\n\r\n    const handleKeyDown = (e) => {\r\n        if(e.key === \"Enter\"){\r\n            songRequest(inputText)\r\n        }}\r\n\r\n\r\n        useEffect(()=> {\r\n           inputRef.current.focus();\r\n        }, [])\r\n         \r\n\r\n  return (\r\n    <div className=\"search_background\">\r\n        <div className={arrowIcon ? \"search_container\" : \"search_container_s\"}> \r\n           <div className=\"search_input_container\">\r\n            <input type=\"search\"\r\n            ref={inputRef}\r\n            placeholder=\"What do you want to listen to?\"\r\n            onChange={(e)=>setInputText(e.target.value)}\r\n            value={inputText}\r\n            onKeyDown={handleKeyDown}/>\r\n            <button onClick={()=>songRequest(inputText)}><BsSearch/></button>\r\n           </div>\r\n \r\n            <div className=\"search_results\">\r\n            {storeSearch\r\n            ? (storeSearch.tracks.items.map((item)=>{\r\n\r\n               return (\r\n                <div className=\"results_outer_container\" key={item.id}>\r\n                    <div className=\"results_inner_container\">\r\n                      <div className=\"results_img\" >\r\n                        <LazyLoadImage \r\n                        src={item.album.images[1].url}\r\n                        placeholderSrc={spotyTiny}\r\n                        effect=\"blur\"\r\n                        alt=\"track\"\r\n                        onClick={()=>setTrackURI(item.uri)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"results_text\">\r\n                       <h1 key={item.id}>{item.name}</h1> \r\n                      </div>\r\n                </div>\r\n                </div>\r\n               )\r\n               \r\n            })\r\n            ) : album1 && album1.tracks && album1.tracks.items ?(\r\n               album1.tracks.items.map((item) => {\r\n                return (<div className=\"results_outer_container\" key={item.id}>\r\n                <div className=\"results_inner_container\">\r\n                  <div className=\"results_img\" >\r\n                    <LazyLoadImage \r\n                    src={item.track.album.images[0].url}\r\n                    placeholderSrc={spotyTiny}\r\n                    effect=\"blur\"\r\n                    alt=\"track\"\r\n                    onClick={()=>setTrackURI(item.track.uri)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"results_text\">\r\n                   <h1 key={item.id}>{item.track.name}</h1> \r\n                  </div>\r\n            </div>\r\n            </div>)\r\n              \r\n               })\r\n              ) : null\r\n            \r\n          }\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search"],"names":["_useContext","useContext","ApiContext","songRequest","storeSearch","album1","_useContext2","SomeContexts","setTrackURI","arrowIcon","_useState","useState","_useState2","_slicedToArray","inputText","setInputText","inputRef","useRef","useEffect","current","focus","_jsx","className","children","_jsxs","type","ref","placeholder","onChange","e","target","value","onKeyDown","key","onClick","BsSearch","tracks","items","map","item","LazyLoadImage","src","album","images","url","placeholderSrc","spotyTiny","effect","alt","uri","name","id","track"],"sourceRoot":""}